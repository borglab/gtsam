name: Python CI

on: [pull_request]

# Every time you make a push to your PR, it cancel immediately the previous checks, 
# and start a new one. The other runner will be available more quickly to your PR. 
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.build_type }} Python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      BOOST_VERSION: 1.72.0
      BOOST_EXE: boost_1_72_0-msvc-14.2      

    strategy:
      fail-fast: true
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name:
          [
            ubuntu-20.04-gcc-9,
            ubuntu-20.04-gcc-9-tbb,
            ubuntu-20.04-clang-9,
            macOS-11-xcode-13.4.1,
            windows-2019-msbuild,
          ]

        build_type: [Release]
        python_version: [3]
        include:
          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"

          - name: ubuntu-20.04-gcc-9-tbb
            os: ubuntu-20.04
            compiler: gcc
            version: "9"
            flag: tbb

          - name: ubuntu-20.04-clang-9
            os: ubuntu-20.04
            compiler: clang
            version: "9"

          - name: macOS-11-xcode-13.4.1
            os: macOS-11
            compiler: xcode
            version: "13.4.1"

          - name: windows-2019-msbuild
            os: windows-2019
            platform: 64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
            # (ipv4|ha).pool.sks-keyservers.net is the SKS GPG global keyserver pool
            # ipv4 avoids potential timeouts because of crappy IPv6 infrastructure
            # 15CF4D18AF4F7421 is the GPG key for the LLVM apt repository
            # This key is not in the keystore by default for Ubuntu so we need to add it.
            LLVM_KEY=15CF4D18AF4F7421
            gpg --keyserver keyserver.ubuntu.com --recv-key $LLVM_KEY || gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-key $LLVM_KEY
            gpg -a --export $LLVM_KEY | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi

          sudo apt-get -y update
          sudo apt-get -y install cmake build-essential pkg-config libpython3-dev python3-numpy libboost-all-dev ninja-build

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew tap ProfFan/robotics
          brew install cmake ninja
          brew install boost
          sudo xcode-select -switch /Applications/Xcode.app
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Setup msbuild (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x${{matrix.platform}}

      - name: Setup python (Windows)
        uses: actions/setup-python@v4
        if: runner.os == 'Windows'
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install ninja (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install ninja
          ninja --version
          where ninja

      - name: Install Boost (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Snippet from: https://github.com/actions/virtual-environments/issues/2667
          $BOOST_PATH = "C:\hostedtoolcache\windows\Boost\$env:BOOST_VERSION\x86_64"

          # Use the prebuilt binary for Windows
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/$env:BOOST_VERSION/$env:BOOST_EXE-${{matrix.platform}}.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=$BOOST_PATH"

          # Set the BOOST_ROOT variable
          echo "BOOST_ROOT=$BOOST_PATH" >> $env:GITHUB_ENV

      - name: Set GTSAM_WITH_TBB Flag
        if: matrix.flag == 'tbb'
        run: |
          echo "GTSAM_WITH_TBB=ON" >> $GITHUB_ENV
          echo "GTSAM Uses TBB"

      - name: Set Swap Space (Linux)
        if: runner.os == 'Linux'
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 6

      - name: Install System Dependencies (Linux, macOS)
        if: runner.os != 'Windows'
        run: |
          bash .github/scripts/python.sh -d

      - name: Install Python Dependencies
        shell: bash
        run: python$PYTHON_VERSION -m pip install -r python/dev_requirements.txt

      - name: Build
        shell: bash
        run: |
          bash .github/scripts/python.sh -b

      - name: Test
        shell: bash
        run: |
          bash .github/scripts/python.sh -t
